package router

import (
	"path"
	"strings"
	"math/rand"
	"errors"
)

//ContentType根据文件名获取contentType
func ContentType(fileName string) string {
	// 文件后缀
   suffix := path.Ext(fileName)
   mime := make(map[string]string)
   mime["html"] = "text/html"
   mime["htm"] = "text/html"
   mime["shtml"] = "text/html"
   mime["css"] = "text/css"
   mime["xml"] = "text/xml"
   mime["gif"] = "image/gif"
   mime["jpeg"] = "image/jpeg"
   mime["jpg"] = "image/jpeg"
   mime["js"] = "application/javascript"
   mime["atom"] = "application/atom+xml"
   mime["rss"] = "application/rss+xml"
   mime["mml"] = "text/mathml"
   mime["txt"] = "text/plain"
   mime["jad"] = "text/vnd.sun.j2me.app-descriptor"
   mime["wml"] = "text/vnd.wap.wml"
   mime["htc"] = "text/x-component"
   mime["png"]	=  "image/png"
   mime["tif"]	=  "image/tiff"
   mime["tiff"] =  "image/tiff"
   mime["wbmp"] =  "image/vnd.wap.wbmp"
   mime["ico"]	=  "image/x-icon"
   mime["jng"]	=  "image/x-jng"
   mime["bmp"]	=  "image/x-ms-bmp"
   mime["svg"]	=  "image/svg+xml"
   mime["svgz"] =  "image/svg+xml"
   mime["webp"] =  "image/webp"
   mime["woff"] =  "application/font-woff"
   mime["jar"]	=  "application/java-archive"
   mime["war"]	=  "application/java-archive"
   mime["ear"]	=  "application/java-archive"
   mime["hqx"]	=  "application/mac-binhex40"
   mime["doc"]	=  "application/msword"
   mime["pdf"]	=  "application/pdf"
   mime["ps"]	=  "application/postscript"
   mime["eps"]	=  "application/postscript"
   mime["ai"]	=  "application/postscript"
   mime["rtf"]	=  "application/rtf"
   mime["xls"]	=  "application/vnd.ms-excel"
   mime["eot"]	=  "application/vnd.ms-fontobject"
   mime["ppt"]	=  "application/vnd.ms-powerpoint"
   mime["wmlc"] =  "application/vnd.wap.wmlc"
   mime["kml"]	=  "application/vnd.google-earth.kml+xml"
   mime["kmz"]	=  "application/vnd.google-earth.kmz"
   mime["7z"]	=  "application/x-7z-compressed"
   mime["cco"]	=  "application/x-cocoa"
   mime["jardiff"]	=  "application/x-java-archive-diff"
   mime["jnlp"] =  "application/x-java-jnlp-file"
   mime["run"]	=  "application/x-makeself"
   mime["pl"]	=  "application/x-perl"
   mime["pm"]	=  "application/x-perl"
   mime["prc"]	=  "application/x-pilot"
   mime["pdb"]	=  "application/x-pilot"
   mime["rar"]	=  "application/x-rar-compressed"
   mime["rpm"]	=  "application/x-redhat-package-manager"
   mime["sea"]	=  "application/x-sea"
   mime["swf"]	=  "application/x-shockwave-flash"
   mime["sit"]	=  "application/x-stuffit"
   mime["tcl"]	=  "application/x-tcl"
   mime["tk"]	=  "application/x-tcl"
   mime["der"]	=  "application/x-x509-ca-cert"
   mime["pem"]	=  "application/x-x509-ca-cert"
   mime["crt"]	=  "application/x-x509-ca-cert"
   mime["xpi"]	=  "application/x-xpinstall"
   mime["xhtml"] =  "application/xhtml+xml"
   mime["zip"]	=  "application/zip"
   mime["bin"]	=  "application/octet-stream"
   mime["exe"]	=  "application/octet-stream"
   mime["dll"]	=  "application/octet-stream"
   mime["deb"]	=  "application/octet-stream"
   mime["dmg"]	=  "application/octet-stream"
   mime["iso"]	=  "application/octet-stream"
   mime["img"]	=  "application/octet-stream"
   mime["msi"]	=  "application/octet-stream"
   mime["msp"]	=  "application/octet-stream"
   mime["msm"]	=  "application/octet-stream"
   mime["docx"]=  "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
   mime["xlsx"]=  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
   mime["pptx"]=  "application/vnd.openxmlformats-officedocument.presentationml.presentation"
   mime["mid"]	=  "audio/midi"
   mime["midi"]=  "audio/midi"
   mime["kar"]	=  "audio/midi"
   mime["mp3"]	=  "audio/mpeg"
   mime["ogg"]	=  "audio/ogg"
   mime["m4a"]	=  "audio/x-m4a"
   mime["ra"]  =  "audio/x-realaudio"
   mime["3gp"]	=  "video/3gpp"
   mime["3gpp"] =  "video/3gpp"
   mime["mp4"]	=  "video/mp4"
   mime["mpeg"]=  "video/mpeg"
   mime["mpg"]	=  "video/mpeg"
   mime["mov"]	=  "video/quicktime"
   mime["webm"]=  "video/webm"
   mime["flv"]	=  "video/x-flv"
   mime["m4v"]	=  "video/x-m4v"
   mime["mng"]	=  "video/x-mng"
   mime["asx"]	=  "video/x-ms-asf"
   mime["asf"]	=  "video/x-ms-asf"
   mime["wmv"]	=  "video/x-ms-wmv"
   mime["avi"]	=  "video/x-msvideo"

	return mime[strings.ToLower(strings.Replace(suffix, ".", "", -1))]
}

//RandomElement根据传入的数组,随机返回一个数组中的元素
func RandomElement(array []string) (string, error){
	if len(array) == 0 {
		return "", errors.New("传入数组不能为空")
	}
	return array[rand.Intn(len(array) - 1)], nil
}